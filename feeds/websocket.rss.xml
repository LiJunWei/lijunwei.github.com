<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>李俊伟-随笔</title><link>http://lijunwei.github.io/</link><description></description><lastBuildDate>Sat, 27 Aug 2016 16:52:00 +0800</lastBuildDate><item><title>WebSocket使用初探(Tornado+Nginx)</title><link>http://lijunwei.github.io/pages/2016/08/27/WebSocket%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2(Tornado+Nginx).html</link><description>&lt;h2&gt;使用场景&lt;/h2&gt;
&lt;p&gt;在web开发中有时候需要实时获取数据，可以采用的方法也很多，比如ajax轮询，长连接等。之前项目中有一个需求是实时的日志展示，实时性要求高
还有根据历史监控数据进行趋势图的绘制，数据量巨大，等待时间长。那么如果使用http请求来处理则面临着超时的问题，如果用ajax频繁的轮询将对服务器
造成很大的压力。websocket提供了客户端和服务器进行双向实时的全双工通信的方法。并且绝大多数现代浏览器都支持websocket，因此需要使用
nginx对websocket服务进行反代和负载均衡，nginx从1.3版本后开始支持websocket。项目用到的tornado框架也原生支持websocket，看来可以尝试
用websocket来尝试解决问题。&lt;/p&gt;
&lt;h2&gt;Tornado的支持&lt;/h2&gt;
&lt;p&gt;tornado对websocket支持的很好，通过继承tornado.websocket.WebSocketHandler类就可以实现对websocket连接的处理。websocket是在标准
http上实现的，websocket中的握手和http中的握手兼容，它使用http中的Upgrade协议头将连接从http升级到WebSocket,从源码上可以看出
WebSocketHandler继承了tornado.web.RequestHandler，因此websocket也可以通过get_argument方法获取ws://URL?**=传来的参数。
WebSocketHandler提供了一系列方法用以处理连接和消息收发，源码中的docstring描述得很清楚，源码是最好的文档没有之一。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;WebSocketHandler&lt;/span&gt;(&lt;span class="n"&gt;tornado&lt;/span&gt;.&lt;span class="n"&gt;web&lt;/span&gt;.&lt;span class="n"&gt;RequestHandler&lt;/span&gt;):
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Subclass this class to create a basic WebSocket handler.&lt;/span&gt;

&lt;span class="s"&gt;Override `on_message` to handle incoming messages, and use&lt;/span&gt;
&lt;span class="s"&gt;`write_message` to send messages to the client. You can also&lt;/span&gt;
&lt;span class="s"&gt;override `open` and `on_close` to handle opened and closed&lt;/span&gt;
&lt;span class="s"&gt;connections.&lt;/span&gt;

&lt;span class="s"&gt;See http://dev.w3.org/html5/websockets/ for details on the&lt;/span&gt;
&lt;span class="s"&gt;JavaScript interface.  The protocol is specified at&lt;/span&gt;
&lt;span class="s"&gt;http://tools.ietf.org/html/rfc6455.&lt;/span&gt;

&lt;span class="s"&gt;Here is an example WebSocket handler that echos back all received messages&lt;/span&gt;
&lt;span class="s"&gt;back to the client:&lt;/span&gt;

&lt;span class="s"&gt;.. testcode::&lt;/span&gt;

&lt;span class="s"&gt;  class EchoWebSocket(tornado.websocket.WebSocketHandler):&lt;/span&gt;
&lt;span class="s"&gt;      def open(self):&lt;/span&gt;
&lt;span class="s"&gt;          print(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;WebSocket&lt;/span&gt; &lt;span class="n"&gt;opened&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&lt;/span&gt;

&lt;span class="s"&gt;      def on_message(self, message):&lt;/span&gt;
&lt;span class="s"&gt;          self.write_message(u&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;said:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; + message)&lt;/span&gt;

&lt;span class="s"&gt;      def on_close(self):&lt;/span&gt;
&lt;span class="s"&gt;          print(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;WebSocket&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;&amp;quot;)

.. &lt;span class="n"&gt;testoutput::&lt;/span&gt;
   :&lt;span class="n"&gt;hide:&lt;/span&gt;

...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Nginx配置反向代理和负载均衡&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;tornadoes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;7001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="o"&gt;***.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;tornadoes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_http_version&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Upgrade&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nginx默认采用循环的方式分配请求，循环的将请求分配到upstream中定义的服务地址。location中的定义对支持websocket必不可少。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">李俊伟</dc:creator><pubDate>Sat, 27 Aug 2016 16:52:00 +0800</pubDate><guid isPermaLink="false">tag:lijunwei.github.io,2016-08-27:pages/2016/08/27/WebSocket使用初探(Tornado+Nginx).html</guid><category>WebSocket</category></item></channel></rss>